import os
import datetime
import numpy as np
import pandas as pd
from io import StringIO


def read(filename='in.conf'):
    """Read GOMC parameter file
    """
    from __init__ import GOMC
    gomc = GOMC()
    with open(filename, 'r') as f:
        for line in f:
            if line[0].isalpha():
                # ignoring all lines that do not start with a letter
                splitted = line.split()
                gomc.set(splitted[0], *tuple(splitted[1:]))
    return gomc


def write(self, filename='in.conf', verbose=True):
    """Write GOMC parameter file
    """
    now = datetime.datetime.now()
    filepath = os.path.join(self.wd, filename)

    with open(filepath, 'w') as f:

        f.write("#" * 30 + "\n")
        f.write("## Written by GOMC-wrapper \n")
        f.write(f"## DATE: {now:%Y-%m-%d %H:%M:%S}\n")
        f.write("#" * 30 + "\n")

        f.write("\n" + "#" * 76 + "\n")
        f.write("# " + "=" * 8 + "-" * 25 + " INPUT " + "-" * 25 + "=" * 8)
        f.write("\n" + "#" * 76 + "\n")

        for key, obj in self.parameters.items():
            if key == "ParaTypeCHARMM" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# FORCEFIELD")
                f.write("\n" + "#" * 36 + "\n")

            elif key == "Coordinates" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# INPUT FILES")
                f.write("\n" + "#" * 36 + "\n")

            elif key == "GEMC":
                f.write("\n" + "#" * 76 + "\n")
                f.write("# " + "=" * 8 + "-" * 25 + " SYSTEM " + "-" * 25 + "=" * 8)
                f.write("\n" + "#" * 76 + "\n")

                if verbose:
                    f.write("\n" + "#" * 36 + "\n")
                    f.write("# GEMC TYPE")
                    f.write("\n" + "#" * 36 + "\n")

            elif key == "Pressure" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# SIMULATION CONDITION")
                f.write("\n" + "#" * 36 + "\n")

            elif key == "ElectroStatic" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# ELECTROSTATIC")
                f.write("\n" + "#" * 36 + "\n")

            elif key == "PressureCalc" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# PRESSURE CALCULATION")
                f.write("\n" + "#" * 36 + "\n")

            elif key == "RunSteps" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# STEPS")
                f.write("\n" + "#" * 36 + "\n")

            elif key == "DisFreq" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# MOVE FREQUENCY")
                f.write("\n" + "#" * 36 + "\n")

            elif key == "CellBasisVector1" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# BOX DIMENSIONS #, X, Y, Z")
                f.write("\n" + "#" * 36 + "\n")

            elif key == "CBMC_First" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# CBMC TRIALS")
                f.write("\n" + "#" * 36 + "\n")

            elif key == "OutputName":
                f.write("\n" + "#" * 76 + "\n")
                f.write("# " + "=" * 8 + "-" * 25 + " OUTPUT " + "-" * 25 + "=" * 8)
                f.write("\n" + "#" * 76 + "\n")

                if verbose:
                    f.write("\n" + "#" * 36 + "\n")
                    f.write("# statistics filename add")
                    f.write("\n" + "#" * 36 + "\n")

            elif key == "CoordinatesFreq" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# enable, frequency")
                f.write("\n" + "#" * 36 + "\n")

            elif key == "OutEnergy" and verbose:
                f.write("\n" + "#" * 36 + "\n")
                f.write("# enable: blk avg., fluct.")
                f.write("\n" + "#" * 36 + "\n")

            if len(obj.values) > 0:
                f.write(key.ljust(16) + " \t")
                f.write(str(obj) + "\n")


def write_topology(filename="topology.inp", atoms=['O', 'H', 'H', 'M'],
                   labels=['O', 'H1', 'H2', 'M'],
                   mass={'O': 15.9994, 'H': 1.0079, 'M': 0.0},
                   charge={'O': 0.0, 'H': 0.5564, 'M': -1.1128},
                   bonds=['OH', 'OM'], molname='TIP4P'):
    """Write topology file
    """
    now = datetime.datetime.now()
    atoms_unique = np.unique(atoms)

    # find total charge
    chargemol = 0
    for atom in atoms:
        chargemol += charge[atom]
    if abs(chargemol) > 1e-6:
        raise Warning("Molecule is not neutral")

    with open(filename, 'w') as f:
        f.write(f"* Custom top file for {molname}\n")
        f.write("* Generated by GOMC-wrapper\n")
        f.write(f"* DATE: {now:%Y-%m-%d %H:%M:%S}\n\n")

        for i, atom in enumerate(atoms_unique):
            f.write(f"MASS{i+1:>5}  {atom:<2}{mass[atom]:>11.4f}  {atom:<2}\n")

        f.write("\nDEFA FIRS NONE LAST NONE\n")
        f.write("AUTOGENERATE ANGLES DIHEDRALS\n")

        f.write(f"\nRESI {molname[:4]}{chargemol:>19.4f}\n")
        f.write("GROUP\n")

        counter = {}
        for key in mass.keys():
            counter[key] = 0

        atom_IDs = []
        for i, atom in enumerate(atoms):
            counter[atom] += 1
            if labels is None:
                proposed_label = atom + str(counter[atom])
                atom_IDs.append(proposed_label)
            else:
                atom_IDs.append(labels[i])
            f.write(f"ATOM {atom_IDs[-1]:<9}{atom:<2}{charge[atom]:>12.4f}\n")

        f.write("BOND    ")
        for i in range(len(atoms)):
            for j in range(len(atoms)):
                for bond in bonds:
                    if atoms[i] == bond[0] and atoms[j] == bond[1]:
                        f.write(f"{atom_IDs[i]:<5}{atom_IDs[j]:<7}")
        f.write("\nPATCHING FIRS NONE LAST NONE\n\nEND\n")


def psfgen(coordinates="coord.pdb", topology="topology.inp", genfile=None):
    """Generate PSF file
    """

    # read coordinate file
    with open(coordinates, 'r') as f:
        f.readline()
        title = f.readline()
        line = f.readline()
        while line.startswith("REMARK"):
            line = f.readline()
        columns = "TYPE ATOM_ID ATOM_LABEL MOL_LABEL MOL_ID X Y Z \
                   MASS CHARGE ATOM_TYPE\n"
        full_string = columns + line + f.read()[:-6]
        df = pd.read_table(StringIO(full_string), sep=r'\s+')
    numatoms = df['ATOM_ID'].iloc[-1]
    nummols = df['MOL_ID'].iloc[-1]

    # read topology file
    autogenerate = []
    atom_types = []
    atom_masses = []
    atoms = []
    atom_labels = []
    atom_charges = []
    bonds = []
    with open(topology, 'r') as f:
        for line in f:
            splitted = line.split()
            if line.startswith("MASS "):
                atom_types.append(splitted[2])
                atom_masses.append(splitted[3])
            elif line.startswith("DEFA "):
                first = splitted[2]
                last = splitted[4]
            elif line.startswith("AUTOGENERATE "):
                for i in range(1, len(splitted)):
                    autogenerate.append(splitted[i])
            elif line.startswith("RESI "):
                mollabel = splitted[1]
                molcharge = splitted[2]
            elif line.startswith("ATOM "):
                atom_labels.append(splitted[1])
                atoms.append(splitted[2])
                atom_charges.append(splitted[3])
            elif line.startswith("BOND "):
                for i in range((len(splitted)-1)//2):
                    bonds.append([splitted[2*i+1], splitted[2*i+2]])

    # create filename of not given
    if genfile is None:
        name, extention = coordinates.split('.')
        genfile = name + ".psf"

    # structurate information to be used in PSF file
    charges, masses = {}, {}
    for atom, charge in zip(atoms, atom_charges):
        charges[atom] = charge
    for atom, mass in zip(atom_types, atom_masses):
        masses[atom] = mass

    df['ISB'] = numatoms * ["ISB"]
    df['ZEROS'] = numatoms * [0]
    all_atom_ids = df['ATOM_LABEL']
    all_charges = df['ATOM_LABEL']
    all_masses = df['ATOM_LABEL']
    for atom, label in zip(atoms, atom_labels):
        all_atom_ids = np.where(all_atom_ids == label, atom, all_atom_ids)
        all_charges = np.where(all_atom_ids == atom, charges[atom], all_charges)
        all_masses = np.where(all_atom_ids == atom, masses[atom], all_masses)

    df['ATOM_TYPE_TOPO'] = all_atom_ids
    df['CHARGE'] = np.asarray(all_charges, dtype=float)
    df['MASS'] = np.asarray(all_masses, dtype=float)
    df['MOL_LABEL_TOPO'] = numatoms * [mollabel]

    # generate bond and angle lists
    angles = [['H1', 'O', 'M'], ['H1', 'O', 'H2'], ['H2', 'O', 'M']]
    numbonds = nummols * len(bonds)
    numangles = nummols * len(angles)
    bond_list = []
    angle_list = []
    for mol in range(nummols):
        mol_atoms = {}
        for atom in np.where(df['MOL_ID'] == mol + 1)[0]:
            mol_atoms[df['ATOM_LABEL'].iloc[atom]] = atom + 1
        for bond in bonds:
            bond_list.append(mol_atoms[bond[0]])
            bond_list.append(mol_atoms[bond[1]])
        for angle in angles:
            angle_list.append(mol_atoms[angle[0]])
            angle_list.append(mol_atoms[angle[1]])
            angle_list.append(mol_atoms[angle[2]])

    # write PSF file
    now = datetime.datetime.now()
    temp = "{:>8} {}\n"
    with open(genfile, 'w') as f:
        # write header information
        f.write("PSF\n\n")
        f.write(temp.format(4, "!NTITLE"))
        f.write(temp.format("REMARKS", "PSF file generated by GOMC-wrapper"))
        f.write(temp.format("REMARKS", f"DATE: {now:%Y-%m-%d %H:%M:%S}"))
        f.write(temp.format("REMARKS", f"topology {topology}"))
        string = "segment ISB {"
        string += " first " + first + ";"
        string += " last " + last + ";"
        string += " auto"
        for auto in autogenerate:
            string += " " + auto.lower()
        string += " }\n"
        f.write(temp.format("REMARKS", string))

        # write atom information
        f.write(temp.format(numatoms, "!NATOM"))
        df_as = df[['ATOM_ID', 'ISB', 'MOL_ID', 'MOL_LABEL_TOPO', 'ATOM_LABEL',
                    'ATOM_TYPE_TOPO', 'CHARGE', 'MASS', 'ZEROS']].copy()
        np.savetxt(f, df_as.values, fmt='%8d %-4s %-4d %-4s %-4s %-4s %10.6f %13.4f %11d')

        # write bond information
        numcol = 8
        f.write("\n")
        f.write(temp.format(numbonds, "!NBOND: bonds"))
        bonds = np.asarray(bond_list, dtype=int).reshape(-1, numcol)
        np.savetxt(f, bonds, fmt=numcol * '%8d')

        # write angle information
        numcol = 9
        f.write("\n")
        f.write(temp.format(numangles, "!NTHETA: angles"))
        angles = np.asarray(angle_list, dtype=int).reshape(-1, numcol)
        np.savetxt(f, angles, fmt=numcol * '%8d')

        # write dihedral information
        f.write("\n")
        f.write(temp.format(0, "!NPHI: dihedrals"))

        # write improper information
        f.write("\n\n")
        f.write(temp.format(0, "!NIMPHI: impropers"))

        # write donor information
        f.write("\n\n")
        f.write(temp.format(0, "!NDON: donors"))

        # write acceptors information
        f.write("\n\n")
        f.write(temp.format(0, "!NACC: acceptors"))

        # write non-bonded information
        f.write("\n\n")
        f.write(temp.format(0, "!NNB: non-bonded"))
        f.write("\n")
        zeros = np.zeros(numatoms)
        numcol = 8
        zeros = zeros.reshape(-1, numcol)
        np.savetxt(f, zeros, fmt=numcol * '%8d')

        # write acceptors information
        f.write("\n")
        f.write(temp.format(1, f"{0:>8} !NGRP"))
        f.write(temp.format(0, f"{0:>8}{0:>8}"))


def write_parameter(filename="Par_TIP4P-2020_Charmm.inp", r0=0.9572,
                    theta=104.52, OM=0.1546, epsilon=0.1856, sigma=3.16,
                    symbols={'O': 'O', 'H': 'H', 'M': 'M'}):
    """Write parameter file
    """
    with open(filename, 'w') as f:
        # write header information
        f.write("* Parameters for TIP4P\n")
        f.write("* Generated by GOMC-wrapper\n\n")

        # write bond information
        temp_bond = "{:<5}{:<5}{:>10}{:>10}\n"
        f.write("BONDS\n")
        f.write("!\n")
        f.write("V(bond) = Kb(b - b0)**2\n")
        f.write("!\n")
        f.write("!" + temp_bond.format(1, 2, "Kb", "b0"))
        f.write(temp_bond.format(symbols['O'], symbols['H'], 9999999999, r0))
        f.write(temp_bond.format(symbols['O'], symbols['M'], 9999999999, OM))
        f.write("\n\n")

        # write angle information
        temp_angle = "{:<5}{:<5}{:<5}{:>10}{:>10}\n"
        f.write("ANGLES\n")
        f.write("!\n")
        f.write("V(angle) = Ktheta(Theta - Theta0)**2\n")
        f.write("!\n")
        f.write("!" + temp_angle.format(1, 2, 3, "Ktheta", "Theta0"))
        f.write(temp_angle.format(symbols['H'], symbols['O'], symbols['H'], 9999999999, theta))
        f.write(temp_angle.format(symbols['H'], symbols['O'], symbols['M'], 9999999999, theta/2))
        f.write("\n\n")

        # write dihedral information
        f.write("DIHEDRALS\n")
        f.write("!\n")
        f.write("V(dihedral) = Kchi(1 + cos(n(chi) - delta))\n")
        f.write("!\n")
        f.write("!atom types\n")

        # write non-bonded information
        temp_nb = "{:<5}{:>11}{:>11}{:>11}{:>11}{:>11}{:>11}\n"
        f.write("NONBONDED\n")
        f.write("!\n")
        f.write("V(Lennard-Jones) = Eps,i,j[(Rmin,i,j/ri,j)**12-2(Rmin,i,j/ri,j)**6]\n")
        f.write("!\n")
        f.write("!" + temp_nb.format("atom", "ignored", "epsilon", "Rmin/2", "ignored", "eps,1-4", "Rmin/2,1-4"))
        f.write(temp_nb.format(symbols['H'], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
        f.write(temp_nb.format(symbols['M'], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))
        f.write(temp_nb.format(symbols['O'], 0.0, epsilon, sigma, 0.0, 0.0, 0.0))


if __name__ == "__main__":
    Z_H = 0.6
    Z_O = - 2 * Z_H
    r0 = 0.9572
    OM = 0.1546
    theta = 104.52
    epsilon = 18.56
    sigma = 3.16
    filename = "topology.inp"
    atoms = ['O', 'H', 'H', 'M']
    labels = ['O', 'H1', 'H2', 'M']
    mass = {'O': 15.9994, 'H': 1.0079, 'M': 0.0}
    charge = {'O': 0.0, 'H': Z_H, 'M': Z_O}
    bonds = ['OH', 'OM']
    molname = 'TIP4P'

    write_topology(filename, atoms, labels, mass, charge, bonds, molname)
    psfgen(coordinates="liquid_gomc_tip4p.pdb", topology=filename)
    psfgen(coordinates="vapor_gomc_tip4p.pdb", topology=filename)
    write_parameter()

    default_input = "in.conf"
    gomc = read(default_input)
    gomc.set("Parameters", "Par_TIP4P-2020_charmm.inp")
    gomc.set("Rcut", 8.5)
    gomc.set("RcutCoulomb", 8.5)
    gomc.set("Coordinates", 0, "liquid_gomc_tip4p.pdb")
    gomc.set("Coordinates", 1, "vapor_gomc_tip4p.pdb")
    gomc.set("Structure", 0, "liquid_gomc_tip4p.psf")
    gomc.set("Structure", 1, "vapor_gomc_tip4p.psf")
